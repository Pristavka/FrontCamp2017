3.1.How many “Chinese” (cuisine) restaurants are in “Queens” (borough)?
Query: db.restaurants.find({borough: "Queens", cuisine: "Chinese"}).count() = 728; or
db.restaurant.find({$and: [{brough: "Queens"}, {cuisine: "Chinese""}]}).count() = 728;

3.2.What is the _id of the restaurant which has the grade with the highest ever score?
Query: db.restaurants.find({"grades.score": {$gt:100}}, {_id: 1}) = ObjectId("5a5c76a2c58bbaf0e39a0f05")

3.3.Add a grade { grade: "A", score: 7, date: ISODate() }to every restaurant in “Manhattan” (borough).
Query: db.restaurants.updateMany({borough: "Manhattan"}, {$push: {grades: {"date": ISODate(), "grade": "A", "score": 7}}});

3.4.What are the names of the restaurants which havea grade at index 8 with score less then 7?Use projection to include only names without _id.
Query: db.restaurants.find({"grades.8.score": {$lt: 7}}, {name: 1, _id: 0})
1. Silver Krust West Indian Restaurant
2. Pure Food

3.5.What are _id and borough of “Seafood”(cuisine)restaurants  which received at least one “B” grade in period from 2014-02-01 to 2014-03-01? Use projection to include only _id and borough.
Query: db.restaurants.find({$and:[{"grades.date": {$gt: ISODate("2014-02-01T00:00:00Z")}},{"grades.date": {$lt: ISODate("2014-03-01T00:00:00Z")}}, {"grades.grade": "B"}, {cuisine: "Seafood"}]}, {_id:1, borough: 1})
Result: 46 restaurants

---------------------------------

4.1.Create an index which will be used by this query and provide proof (from explain()or Compass UI) that the index is indeed used by the winning plan: db.restaurants.find({ name: "Glorious Food" })
Query: db.restaurants.createIndex({name: 1})
Result: db.restaurants.find({name: "Glorious Food"}).explain() - "stage" : "IXSCAN"

4.2.Drop index from task 4.1
Query: db.restaurants.dropIndex({"name": 1})

4.3.Create an index to make this query coveredand provide proof (from explain()or CompassUI)that it is indeed covered:db.restaurants.find({ restaurant_id: "41098650" }, { _id: 0, borough: 1 })
Query: db.restaurants.createIndex({"restaurant_id": 1}); 
db.restaurants.find({restaurant_id: "41098650"}, {_id: 0, borough: 1}).explain()
{
        "queryPlanner" : {
                "plannerVersion" : 1,
                "namespace" : "frontcamp.restaurants",
                "indexFilterSet" : false,
                "parsedQuery" : {
                        "restaurant_id" : {
                                "$eq" : "41098650"
                        }
                },
                "winningPlan" : {
                        "stage" : "PROJECTION",
                        "transformBy" : {
                                "_id" : 0,
                                "borough" : 1
                        },
                        "inputStage" : {
                                "stage" : "FETCH",
                                "inputStage" : {
                                        "stage" : "IXSCAN",
                                        "keyPattern" : {
                                                "restaurant_id" : 1
                                        },
                                        "indexName" : "restaurant_id_1",
                                        "isMultiKey" : false,
                                        "multiKeyPaths" : {
                                                "restaurant_id" : [ ]
                                        },
                                        "isUnique" : false,
                                        "isSparse" : false,
                                        "isPartial" : false,
                                        "indexVersion" : 2,
                                        "direction" : "forward",
                                        "indexBounds" : {
                                                "restaurant_id" : [
                                                        "[\"41098650\", \"41098650\"]"
                                                ]
                                        }
                                }
                        }
                },
                "rejectedPlans" : [ ]
        },
        "serverInfo" : {
                "host" : "EPBYGOMW0483",
                "port" : 27017,
                "version" : "3.6.2",
                "gitVersion" : "489d177dbd0f0420a8ca04d39fd78d0a2c539420"
        },
        "ok" : 1
}

4.4.Create apartialindexon cuisinefieldwhich will be usedonly when filtering on borough equal to “Staten Island”:
db.restaurants.find({ borough: "Staten Island", cuisine: "American"}) –uses index
db.restaurants.find({ borough: "Staten Island", name: "Bagel Land" }) –does not use index
db.restaurants.find({ borough: "Queens", cuisine: "Pizza" }) –does not use index

4.5.Create an index to make query from task 3.4 coveredand provide proof(from explain()or Compass UI)that it is indeed covered